#!/usr/bin/env python

import sqlite3, os, time

file_name = "/net/cpp-mirror/databases/ensembl_cache/compara/orthology/ensembl_compara_58.orthology.sqlite.cache"
conn = sqlite3.connect(file_name)

c1 = conn.cursor()
c2 = conn.cursor()

c1.execute('PRAGMA cache_size = 200000')
c1.execute('DROP TABLE IF EXISTS method_link_ids;')
c1.execute('CREATE TEMP TABLE method_link_ids (method_link_species_set_id INTEGER);')
method_link_ids = [     22641, 23895, 25945, 20508, 23898, 20510, 20513, 20515, 20520, 22601, 22602, 22603, 22604, 22607, 22616, 22617, 22618, 22619, 20573, 24670, 24671, 20576, 24673,
                        24674, 24676, 23910, 24678, 24679, 22632, 24681, 24682, 24683, 24684, 24685, 20590, 24687, 24688, 21864, 22642, 22643, 24692, 24693, 24694, 24695, 24696, 24697,
                        24698, 22652, 24701, 24702, 24703, 24705, 24707, 24708, 24709, 24711, 24712, 24713, 22666, 24715, 20620, 22669, 23917, 22672, 22673, 22674, 22677, 22681, 22682,
                        22683, 22684, 22686, 22687, 22688, 25968, 22691, 22692, 22693, 22694, 25969, 22697, 20650, 22701, 22702, 22703, 22704, 22707, 22712, 24767, 24768, 24770, 21878,
                        22727, 24776, 24777, 24779, 22732, 24782, 22737, 24788, 24789, 24791, 22746, 22747, 22748, 24797, 24798, 22752, 24801, 24803, 22757, 24806, 24807, 22761, 22762,
                        22763, 22764, 24813, 24149, 24815, 24818, 24819, 24821, 22775, 22776, 24827, 24830, 24833, 24836, 24839, 24840, 24842, 24845, 24848, 24849, 24854, 24857, 24858,
                        24860, 25988, 24863, 24866, 21894, 24872, 24875, 24878, 24884, 24887, 24890, 24893, 24896, 24899, 24900, 24902, 24903, 20808, 24905, 20810, 20811, 20812, 20813,
                        25656, 20827, 20828, 20831, 20841, 20847, 20848, 20851, 23885, 22966, 23912, 22990, 21584, 25058, 25062, 25681, 23975, 25068, 26024, 25074, 25076, 23030, 25080,
                        25082, 25084, 25088, 25686, 25102, 25108, 23062, 25114, 23070, 20571, 23086, 22622, 23094, 25144, 25146, 25148, 21867, 23102, 21296, 25155, 25157, 23918, 25160,
                        25163, 25164, 23118, 25167, 25168, 25170, 25177, 25180, 25182, 25389, 25959, 25196, 25197, 25198, 25199, 20585, 23182, 24686, 24800, 21615, 23206, 24689, 21895,
                        24690, 24691, 22644, 23230, 24700, 25353, 25359, 25368, 25377, 25380, 25386, 21291, 21292, 21293, 21294, 21295, 25392, 22668, 25398, 21306, 21307, 21308, 24714,
                        21312, 21313, 21314, 22667, 24716, 25419, 21324, 21325, 21326, 24717, 24824, 25428, 21333, 21334, 21335, 25434, 21339, 21340, 21341, 21348, 21349, 21350, 21351,
                        21352, 21353, 21354, 21355, 21356, 21359, 21360, 21365, 25470, 25473, 25476, 25479, 20625, 22671, 25961, 20640, 21444, 22689, 21449, 23714, 21457, 20643, 21462,
                        21463, 21465, 21468, 21469, 23717, 25767, 25768, 21499, 21500, 25770, 21870, 23723, 21519, 21520, 23916, 25648, 25650, 25654, 21559, 21560, 25663, 25665, 25669,
                        25671, 25672, 25674, 25678, 25680, 21585, 25683, 25684, 21589, 21590, 25690, 25692, 21599, 21600, 21614, 25711, 25713, 21619, 21620, 25720, 25722, 25726, 25728,
                        22722, 23713, 25762, 23715, 25764, 25765, 23718, 23719, 23720, 23721, 23722, 25771, 25773, 22749, 23733, 23734, 23746, 23747, 23748, 23750, 23751, 23752, 23753,
                        23754, 23755, 23756, 23766, 23767, 23788, 23789, 23801, 23802, 23803, 23805, 23806, 23807, 23808, 23809, 23810, 23811, 23821, 23822, 21782, 21783, 21784, 21785,
                        23834, 21787, 23836, 23838, 23839, 23840, 23841, 23842, 23843, 23844, 23845, 23846, 23847, 23849, 21802, 21803, 23852, 21805, 23854, 23855, 23865, 23866, 23867,
                        23868, 23869, 23913, 23872, 23873, 23874, 23875, 23876, 25142, 23878, 23879, 23880, 23882, 23883, 23884, 21837, 23886, 23887, 21840, 23889, 23890, 23891, 23893,
                        23894, 21847, 23896, 23897, 25946, 23899, 25949, 25950, 25955, 25956, 23909, 21862, 23911, 25960, 21865, 25962, 23915, 21868, 21869, 25966, 23919, 23920, 23921,
                        25970, 25973, 25974, 21879, 21880, 23931, 23932, 24810, 21887, 21888, 21889, 21890, 25987, 21892, 21893, 23942, 23943, 21897, 25994, 25997, 25998, 23953, 23954,
                        21908, 21909, 21911, 21912, 21913, 23964, 23965, 26021, 26022, 26023, 23976, 26025, 26026, 26027, 26028, 23986, 23987, 23999, 24000, 24001, 24003, 24004, 24005,
                        24006, 24007, 24008, 24009, 21872, 24019, 24020, 25166, 24030, 24031, 24032, 24033, 24034, 24036, 24037, 24038, 24039, 24040, 24041, 24042, 25965, 24063, 24064,
                        24065, 24066, 24067, 24069, 24070, 24071, 24072, 24073, 24074, 24075, 24085, 24086, 24096, 24097, 24156, 25967, 24118, 24119, 20036, 24139, 24140, 20047, 22097,
                        24148, 22101, 25993, 24809, 22108, 24157, 20062, 22113, 22114, 22771, 22116, 22118, 21877, 24169, 22122, 22119, 24174, 24175, 24178, 24179, 24181, 24182, 24183,
                        24184, 24185, 24170, 23835, 24812, 20163, 22235, 22236, 22239, 22240, 22242, 22244, 22246, 22249, 22250, 22251, 22252, 22254, 22255, 22256, 22260, 22261, 22263,
                        22264, 22265, 22267, 23850, 23851, 21804, 23853, 21807, 22303, 22305, 20262, 22313, 22323, 22333, 22335, 22339, 22343, 22345, 22351, 22373, 23871, 21827, 23877,
                        22449, 22450, 22452, 20809, 22457, 22458, 22460, 24906, 22464, 22467, 22468, 22518, 22472, 24908, 20427, 22477, 22478, 22479, 22480, 22482, 22483, 22484, 21838,
                        22487, 22488, 22489, 22490, 21839, 22492, 22495, 22496, 23888, 22500, 21863, 22502, 22506, 22508, 22510, 22514, 22517, 20049, 22520, 22523, ]
for mi in method_link_ids:
    c1.execute("""INSERT INTO method_link_ids VALUES (?)""", (mi,))

c1.execute("CREATE index i_method_link_ds on method_link_ids(method_link_species_set_id);")

#conn.commit()

# Create table
c1.execute('''select *from homology natural join method_link_ids order by method_link_species_set_id''');
c2.execute('''select *from homology_member natural join method_link_ids order by method_link_species_set_id''');
curr_method_link_species_id = None
cnt_curr_method_link_species_id = 0
c1_ended = False
c2_ended = False
start = time.time()
while 1:
    curr_h_lines = 0
    curr_hm_lines = 0
    for data in c1:
        if not curr_method_link_species_id:
            curr_method_link_species_id = data[0]
        elif curr_method_link_species_id <> data[0]:
            c1_data = data
            break
        curr_h_lines +=1
    else:
        c1_ended = True

    for data in c2:
        if curr_method_link_species_id <> data[-1]:
            c2_data = data
            break
        curr_hm_lines +=1
    else:
        c2_ended = True

    if c1_ended and c2_ended:
        break
    cnt_curr_method_link_species_id +=1
    print "%4d in %4.1fs (%d) [%d:%d]" % (cnt_curr_method_link_species_id, time.time() - start, curr_method_link_species_id, curr_h_lines, curr_hm_lines)

    curr_method_link_species_id = c1_data[0]
    assert(curr_method_link_species_id == c2_data[-1])

conn.close()



